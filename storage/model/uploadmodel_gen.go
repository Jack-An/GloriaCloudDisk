// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uploadFieldNames          = builder.RawFieldNames(&Upload{})
	uploadRows                = strings.Join(uploadFieldNames, ",")
	uploadRowsExpectAutoSet   = strings.Join(stringx.Remove(uploadFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	uploadRowsWithPlaceHolder = strings.Join(stringx.Remove(uploadFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	uploadModel interface {
		Insert(ctx context.Context, data *Upload) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Upload, error)
		Update(ctx context.Context, data *Upload) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUploadModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Upload struct {
		Id        int64          `db:"id"`
		ParentId  sql.NullInt64  `db:"parent_id"`
		Name      string         `db:"name"`
		Tp        string         `db:"tp"`
		Ext       sql.NullString `db:"ext"`
		Key       sql.NullString `db:"key"`
		Size      int64          `db:"size"`
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
		Deleted   int64          `db:"deleted"`
	}
)

func newUploadModel(conn sqlx.SqlConn) *defaultUploadModel {
	return &defaultUploadModel{
		conn:  conn,
		table: "`upload`",
	}
}

func (m *defaultUploadModel) Insert(ctx context.Context, data *Upload) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, uploadRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Tp, data.Ext, data.Key, data.Size, data.CreatedAt, data.UpdatedAt, data.Deleted)
	return ret, err
}

func (m *defaultUploadModel) FindOne(ctx context.Context, id int64) (*Upload, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uploadRows, m.table)
	var resp Upload
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUploadModel) Update(ctx context.Context, data *Upload) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uploadRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Tp, data.Ext, data.Key, data.Size, data.CreatedAt, data.UpdatedAt, data.Deleted, data.Id)
	return err
}

func (m *defaultUploadModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUploadModel) tableName() string {
	return m.table
}
