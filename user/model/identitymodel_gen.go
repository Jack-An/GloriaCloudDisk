// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	identityFieldNames          = builder.RawFieldNames(&Identity{})
	identityRows                = strings.Join(identityFieldNames, ",")
	identityRowsExpectAutoSet   = strings.Join(stringx.Remove(identityFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	identityRowsWithPlaceHolder = strings.Join(stringx.Remove(identityFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	identityModel interface {
		Insert(ctx context.Context, data *Identity) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Identity, error)
		Update(ctx context.Context, data *Identity) error
		Delete(ctx context.Context, id int64) error
	}

	defaultIdentityModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Identity struct {
		Id        int64        `db:"id"`
		Password  string       `db:"password"`
		LockTime  sql.NullTime `db:"lock_time"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt time.Time    `db:"updated_at"`
		Deleted   int64        `db:"deleted"`
	}
)

func newIdentityModel(conn sqlx.SqlConn) *defaultIdentityModel {
	return &defaultIdentityModel{
		conn:  conn,
		table: "`identity`",
	}
}

func (m *defaultIdentityModel) Insert(ctx context.Context, data *Identity) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, identityRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Password, data.LockTime, data.CreatedAt, data.UpdatedAt, data.Deleted)
	return ret, err
}

func (m *defaultIdentityModel) FindOne(ctx context.Context, id int64) (*Identity, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", identityRows, m.table)
	var resp Identity
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIdentityModel) Update(ctx context.Context, data *Identity) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, identityRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Password, data.LockTime, data.CreatedAt, data.UpdatedAt, data.Deleted, data.Id)
	return err
}

func (m *defaultIdentityModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultIdentityModel) tableName() string {
	return m.table
}
